"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const query_string_1 = __importDefault(require("query-string"));
const QUERY_OBJECT = Symbol('queryObject');
exports.querryConstructionSecret = Symbol('querryConstructionSecret');
const useConstructorError = new Error(`You have to use factory method such as 'createStaticQuerry()'`);
class Querry {
    constructor(_querryConstructionSecret, history, location) {
        this[_a] = {};
        this.handleChangeLocation = (location) => {
            const { search } = location;
            this[QUERY_OBJECT] = parse(search);
        };
        if (_querryConstructionSecret !== exports.querryConstructionSecret) {
            throw useConstructorError;
        }
        if (history) {
            this[QUERY_OBJECT] = parse(history.location.search);
            history.listen(this.handleChangeLocation);
        }
        else if (location) {
            this[QUERY_OBJECT] = parse(location.search);
        }
    }
    mutate(updater) {
        const clonedObject = Object.assign({}, this[QUERY_OBJECT]);
        this[QUERY_OBJECT] = updater(clonedObject);
        return this;
    }
    toJSON() {
        return this[QUERY_OBJECT];
    }
    toString() {
        return stringify(this[QUERY_OBJECT]);
    }
}
_a = QUERY_OBJECT;
exports.default = Querry;
function parse(search) {
    const query = {};
    const parsed = query_string_1.default.parse(search);
    try {
        Object.entries(parsed)
            .forEach(([key, value]) => {
            if (value) {
                query[key] = JSON.parse(value);
            }
        });
    }
    catch (err) {
        console.error('Querry.parse(): error parsing query: %s', search); // eslint-disable-line no-console
    }
    return query;
}
exports.parse = parse;
function stringify(queryObject = {}) {
    let result = '';
    let count = 0;
    Object.entries(queryObject)
        .forEach(([key, value]) => {
        if (value !== undefined) {
            result += `${prefix(count)}${key}=${JSON.stringify(value)}`;
            count += 1;
        }
    });
    return result;
}
exports.stringify = stringify;
function prefix(idx) {
    return idx === 0 ? '?' : '&';
}
