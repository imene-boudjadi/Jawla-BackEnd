"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const react_router_1 = require("react-router");
const QuerryContext_1 = __importDefault(require("./QuerryContext"));
const incorrectVersionError = new Error('use-react-router may only be used with react-router@^5.');
const missingRouterContextError = new Error('useReactRouter may only be called within a <Router /> context.');
const incorrectUnsubscriberError = new Error('Something other than UnregisterCallback is registered');
const missingQuerryContextError = new Error('You have to wrap the component with <QuerryProvider />');
function useQuerry() {
    if (!react_router_1.__RouterContext) {
        throw incorrectVersionError;
    }
    const router = react_1.useContext(react_router_1.__RouterContext);
    if (!router) {
        throw missingRouterContextError;
    }
    const querry = react_1.useContext(QuerryContext_1.default);
    if (!querry) {
        throw missingQuerryContextError;
    }
    const historySubscribers = react_1.useRef([]);
    const forceUpdate = useForceUpdate();
    react_1.useEffect(() => {
        function handleChangeHistory() {
            forceUpdate({});
        }
        const unsubscribe = router.history.listen(handleChangeHistory);
        historySubscribers.current.push(unsubscribe);
        return () => {
            if (historySubscribers.current.length > 1) {
                console.warn('unsubscribe is more than one: %s', historySubscribers.current.length); // eslint-disable-line
            }
            clearSubscribers(historySubscribers.current);
        };
    }, [router]);
    return Object.assign({}, router, { querry });
}
exports.default = useQuerry;
function clearSubscribers(arr) {
    while (arr.length) {
        const unsubscribe = arr.pop();
        if (unsubscribe !== undefined) {
            unsubscribe();
        }
        else {
            throw incorrectUnsubscriberError;
        }
    }
}
function useForceUpdate() {
    const [, forceUpdate] = react_1.useReducer((s) => s + 1, 0);
    return forceUpdate;
}
