"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const history_1 = require("history");
const react_1 = __importDefault(require("react"));
const react_router_dom_1 = require("react-router-dom");
const Querry_1 = __importStar(require("./Querry"));
const QuerryContext_1 = __importDefault(require("./QuerryContext"));
exports.QuerriedBrowserRouter = (_a) => {
    var { children } = _a, rest = __rest(_a, ["children"]);
    const history = history_1.createBrowserHistory(rest);
    const querry = createBrowserQuerry(history);
    return (react_1.default.createElement(react_router_dom_1.Router, { history: history },
        react_1.default.createElement(QuerryContext_1.default.Provider, { value: querry }, children)));
};
exports.QuerriedStaticRouter = ({ basename, children, context, location, }) => {
    const querry = createStaticQuerry(location);
    return (react_1.default.createElement(react_router_dom_1.StaticRouter, { basename: basename, context: context, location: location },
        react_1.default.createElement(QuerryContext_1.default.Provider, { value: querry }, children)));
};
function createStaticQuerry(location) {
    const _location = history_1.createLocation(location);
    return new Querry_1.default(Querry_1.querryConstructionSecret, undefined, _location);
}
function createBrowserQuerry(history) {
    return new Querry_1.default(Querry_1.querryConstructionSecret, history);
}
